_G.iOSr={["dir"]=shell.dir(),["build"]="2016.7.29.2.07",["buildURL"]="http://pastebin.com/raw/d9u0SceS",["directoryStructure"]={["base"]="/iOS/router"}}local a=true;function log(...)local b;if fs.exists(_G.iOSr["dir"].._G.iOSr["directoryStructure"]["base"].."/log")then local c=fs.open(_G.iOSr["dir"].._G.iOSr["directoryStructure"]["base"].."/log","r")b=textutils.unserialize(c.readAll())c.close()else b={}end;local d={...}if d[1]=="ERR"or d[1]=="DEBUG"or d[1]=="INFO"then if#d>1 then local e=""local f=term.getTextColor()for g,h in pairs(d)do if#e==0 then e="["..h.."]"else e=e.." ["..h.."]"end end;table.insert(b,os.time().." >> "..e)local c=fs.open(_G.iOSr["dir"].._G.iOSr["directoryStructure"]["base"].."/log","w")c.write(textutils.serialize(b))c.close()if d[1]=="ERR"then term.setTextColor(colors.red)print(e)elseif d[1]=="DEBUG"then term.setTextColor(colors.blue)print(e)elseif d[1]=="INFO"then term.setTextColor(colors.yellow)print(e)end;term.setTextColor(f)else local f=term.getTextColor()term.setTextColor(colors.red)print("[ERR] Log must have more than one argument")term.setTextColor(f)end else local f=term.getTextColor()term.setTextColor(colors.red)print("[ERR] Invalid first argument")term.setTextColor(f)end end;function getLatestBuildNumber()if http.checkURL(_G.iOSr["buildURL"])then log("DEBUG","checkURL true")local i={["User-Agent"]="iOS/".._G.iOSr["build"].." ("..os.version()..")"}local j=http.get(_G.iOSr["buildURL"],i)local k=textutils.unserialize(j.readAll())["router"]log("DEBUG","Latest build: "..k)j.close()return k else log("INFO","checkURL false")return 0 end end;function openModems()local l=rs.getSides()local m;local c=fs.open(_G.iOSr["dir"].._G.iOSr["directoryStructure"]["base"].."/vlan","r")m=textutils.unserialize(c.readAll())c.close()for n=1,#l do if peripheral.getType(l[n])=="modem"then local o={l[n],peripheral.wrap(l[n])}o[2].closeAll()if m[l[n]]==nil then local p={1}m[l[n]]=p;log("INFO","Opening "..l[n].." on VLAN 1")o[2].open(1)else for q=1,#m[l[n]]do log("INFO","Opening "..l[n].." on VLAN "..q)o[2].open(m[l[n]][q])end end end end;local c=fs.open(_G.iOSr["dir"].._G.iOSr["directoryStructure"]["base"].."/vlan","w")c.write(textutils.serialize(m))c.close()end;function checkOSStructure()if fs.exists(_G.iOSr["dir"].._G.iOSr["directoryStructure"]["base"])==false then log("ERR","Base directory does not exist")log("ERR","If this is your first time running this, then it is expected.")fs.makeDir(_G.iOSr["dir"].._G.iOSr["directoryStructure"]["base"])log("DEBUG","Created base directory")end;if fs.exists(_G.iOSr["dir"].._G.iOSr["directoryStructure"]["base"].."/log")==false then log("ERR","Log file does not exist")local c=fs.open(_G.iOSr["dir"].._G.iOSr["directoryStructure"]["base"].."/log","w")c.write("{}")c.close()end;if fs.exists(_G.iOSr["dir"].._G.iOSr["directoryStructure"]["base"].."/vlan")==false then log("ERR","Vlan file does not exist")local c=fs.open(_G.iOSr["dir"].._G.iOSr["directoryStructure"]["base"].."/vlan","w")c.write("{}")c.close()end end;function startup()log("DEBUG","Checking OS Folder Structure")checkOSStructure()log("INFO","Done")log("DEBUG","Opening modems")openModems()log("DEBUG","Checking for updates..")log("DEBUG","Current build: ".._G.iOSr["build"])local r=getLatestBuildNumber()if _G.iOSr["build"]==r then log("DEBUG","You are on the latest software release")else if _G.iOSr["build"]<r then log("ERR","You are running an out-of-date build")else log("INFO","You are on the development branch")end end;log("INFO","Done")print([[
===================================================
	
	     InZernet Router build ]].._G.iOSr["build"]..[[


===================================================
	]])parallel.waitForAny(CLI,main)end;local s={["ping"]=function()print("Pong")end,["exit"]=function()a=false end,["reboot"]=function()os.reboot()end,["shutdown"]=function()os.shutdown()end,["networking"]=function(t)if string.lower(t[1])=="restart"then log("INFO","Restarting network")openModems()log("INFO","Done")else log("ERR","Invalid argument")end end,["update"]=function()local r=getLatestBuildNumber()if r==0 then print("Can't check for updates")return end;if _G.iOSr["build"]==r then print("You have the lastest iOS")else if _G.iOSr["build"]<r then write[[
iOS is out of date
Would you like to update? [Y/n] ]]local u=read()if u=="Y"or u=="y"then print("'Updated'")end else print("You are on the development branch")end end end,["vlan"]=function(t)if t[1]==nil or t[2]==nil or t[3]==nil then log("ERR","Usage: vlan add  <side> <vlan #>")return end;if string.lower(t[1])=="add"or string.lower(t[1])=="remove"then if#t==3 then if not tonumber(t[3])then log("ERR","Usage: vlan add  <side> <vlan #>")return end;if tonumber(t[3])>0 and tonumber(t[3])<129 then local v=false;for n=1,#rs.getSides()do if rs.getSides()[n]==string.lower(t[2])then v=true;local m;local c=fs.open(_G.iOSr["dir"].._G.iOSr["directoryStructure"]["base"].."/vlan","r")m=textutils.unserialize(c.readAll())c.close()if m[t[2]]==nil then m[t[2]]={tonumber(t[3])}else local w=false;for x=1,#m[t[2]]do if m[t[2]][n]==tonumber(t[3])then w=true end end;if w then log("ERR",t[2].." already contains VLAN "..t[3])return else table.insert(m[t[2]],tonumber(t[3]))end end;log("INFO","Added VLAN "..t[2].." to side "..t[3])local c=fs.open(_G.iOSr["dir"].._G.iOSr["directoryStructure"]["base"].."/vlan","w")c.write(textutils.serialize(m))c.close()end end;if v==false then log("ERR","Invalid side <bottom|top|back|front|right|left>")end else log("ERR","VLAN must be between 1-128")end else log("ERR","Usage: vlan add  <side> <vlan #>")end else log("ERR","Invalid argument")end end}function CLI()while a do write("[tty1@"..os.getComputerID().."]# ")local y=read()local z={}local d={}for g in string.gmatch(y,'[^ ]+')do table.insert(z,g)end;for n=2,#z do table.insert(d,z[n])end;if s[z[1]]~=nil then s[z[1]](d)else printError(tostring(z[1])..": command not found")end end end;function IPCheck(A)local B={}if A==nil then return 103 end;for C in string.gmatch(A,"[^.]+")do table.insert(B,C)end;if#B==2 then if tonumber(B[1])and tonumber(B[2])then return true else return 102 end else return 101 end end;function packetCheck(D)if#D==6 then if D[1]==2 then if D[2]==1 or D[2]==6 or D[2]==17 then if D[3]>=1 then if IPCheck(D[4])==true then if IPCheck(D[5])==true then if D[6]~=nil then return true else return 106 end else return 105 end else return 104 end else return 103 end else return 102 end else return 101 end else return 100 end end;function packetHandler(E)if packetCheck(E)==true then print("Packet good")else print("packet not good")end end;function main()while a do local F,G,H,I,J,K=os.pullEvent("modem_message")packetHandler(J)end end;startup()